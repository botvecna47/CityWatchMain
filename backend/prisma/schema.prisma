// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  citizen
  authority
  admin
}

enum Category {
  GARBAGE
  ROAD
  WATER
  POWER
  OTHER
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model City {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  users     User[]
  reports   Report[]

  @@map("cities")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(citizen)
  cityId    String?
  city      City?    @relation(fields: [cityId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  reports           Report[]
  authorityUpdates  AuthorityUpdate[]
  auditLogs         AuditLog[]
  comments          Comment[]
  notifications     Notification[]

  @@map("users")
}

model Report {
  id          String   @id @default(uuid())
  title       String
  description String
  category    Category
  status      Status   @default(OPEN)
  cityId      String
  city        City     @relation(fields: [cityId], references: [id])
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  deleted     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  authorityUpdates AuthorityUpdate[]
  comments         Comment[]
  attachments      Attachment[]

  @@map("reports")
}

model AuthorityUpdate {
  id          String   @id @default(uuid())
  reportId    String
  report      Report   @relation(fields: [reportId], references: [id])
  authorityId String
  authority   User     @relation(fields: [authorityId], references: [id])
  text        String
  newStatus   Status?
  createdAt   DateTime @default(now())

  @@map("authority_updates")
}

model AuditLog {
  id         String   @id @default(uuid())
  actorId    String
  actorRole  Role
  action     String
  targetType String
  targetId   String
  reason     String?
  metadata   Json?
  createdAt  DateTime @default(now())
  
  // Relations
  actor      User     @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  reportId  String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  report    Report   @relation(fields: [reportId], references: [id])
  createdAt DateTime @default(now())

  @@map("comments")
}

model Attachment {
  id        String   @id @default(uuid())
  filename  String
  filepath  String
  mimetype  String
  size      Int
  reportId  String
  report    Report   @relation(fields: [reportId], references: [id])
  createdAt DateTime @default(now())

  @@map("attachments")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String   // "status_change", "new_comment", "report_resolved", "authority_update"
  message   String
  isRead    Boolean  @default(false)
  reportId  String?  // Optional reference to the related report
  createdAt DateTime @default(now())

  @@map("notifications")
}
